public class BitOperation {
  public static void main(String[] args) {
    // 2&3、~-2、~2、2|3、2^3、13&7、5|4、-3^3

    // 运算都是已补码的方式运算的，看是以原码的方式看的
    // 2 的原码因为是正数所以二进制最高位是0: 00000000 00000000 00000000 00000010 (三码合一都是一样的)
    // 2 的补码: 00000000 00000000 00000000 00000010
    // 3 的原码: 00000000 00000000 00000000 00000011
    // 3 的补码: 00000000 00000000 00000000 00000011
    // 2 & 3 两位都是1才为1否则为0，即： 00000000 00000000 00000000 00000010 运算后的补码 看的是原码
    // 因为二进制的最高位是0是正数，所以三码合一，运算后的原码是: 00000000 00000000 00000000 00000010 即结果为2
    System.out.println(2 & 3); // 2

    // -2 的原码: 10000000 00000000 00000000 00000010 因为是负数，所以二进制的最高位是1
    // -2 的补码: 负数的补码 = 它的反码 + 1，即先要算出它的反码
    // -2 的反码: 负数的反码 = 它的原码符号位不变(即最高位)，其他位取反, 即: 11111111 11111111 11111111 11111101
    // -2 的补码: 11111111 11111111 11111111 11111110
    // 运算后的补码为: 00000000 00000000 00000000 00000001 
    // 运算后的原码为: 因为是二进制的最高位是 0 所以是正数,即三码合一: 00000000 00000000 00000000 00000001
    System.out.println(~-2); // 1

    // 2 的原码: 00000000 00000000 00000000 00000010
    // 2 的补码: 00000000 00000000 00000000 00000010
    // 运算后的补码: 11111111 11111111 11111111 11111101
    // 运算后的原码: 先得出它的反码 -> 他的补码 - 1 
    // 运算后的反码: 11111111 11111111 11111111 11111100
    // 运算后的原码: 反推 -> 负数的反码 = 它的原码最高位不变，其余取反. 即: 10000000 00000000 00000000 00000011
    System.out.println(~2); // -3

    // 2 的原码 00000000 00000000 00000000 00000010
    // 2 的补码 00000000 00000000 00000000 00000010
    // 3 的原码 00000000 00000000 00000000 00000011
    // 3 的补码 00000000 00000000 00000000 00000011
    // 运算后的补码 00000000 00000000 00000000 00000011
    // 运算后的原码 00000000 00000000 00000000 00000011
    System.out.println(2 | 3); // 3

    // -3 的原码 10000000 00000000 00000000 00000011
    // -3 的补码 负数的补码 = 它的反码 + 1
    // -3 的反码 负数的反码 = 它的原码最高位不变，其余取反 即: 11111111 11111111 11111111 11111100
    // -3 的补码 11111111 11111111 11111111 11111101
    // 3 的原码 00000000 00000000 00000000 00000011
    // 3 的补码 00000000 00000000 00000000 00000011
    // 运算后的补码 11111111 11111111 11111111 11111110
    // 运算后的补码 = 它的反码 + 1   它的反码 = 运算后的补码 - 1
    // 运算后的反码 11111111 11111111 11111111 11111101
    // 运算后的原码 10000000 00000000 00000000 00000010
    System.out.println(-3 ^ 3); // -2
  }
}